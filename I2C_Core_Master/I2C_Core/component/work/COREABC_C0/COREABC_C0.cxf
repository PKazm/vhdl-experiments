<?xml version="1.0" encoding="UTF-8" standalone="no" ?><Component xmlns="http://actel.com/sweng/afi"><name>COREABC_C0</name><vendor/><library/><version/><fileSets><fileSet fileSetId="OTHER_FILESET"><file fileid="0"><name>./COREABC_C0.sdb</name><userFileType>SDB</userFileType></file><file fileid="1"><name>./COREABC_C0_manifest.txt</name><userFileType>LOG</userFileType></file></fileSet><fileSet fileSetId="COMPONENT_FILESET"><file fileid="2"><name>./COREABC_C0_0/COREABC_C0_COREABC_C0_0_COREABC.cxf</name><userFileType>CXF</userFileType></file><file fileid="3"><name>../../Actel/DirectCore/COREABC/3.7.101/COREABC.cxf</name><userFileType>CXF</userFileType></file></fileSet><fileSet fileSetId="HDL_FILESET"><file fileid="4"><name>./COREABC_C0.vhd</name><fileType>VHDLSource</fileType></file></fileSet></fileSets><hwModel><views><view><fileSetRef>OTHER_FILESET</fileSetRef><fileSetRef>COMPONENT_FILESET</fileSetRef><name>OTHER</name></view><view><fileSetRef>HDL_FILESET</fileSetRef><name>HDL</name></view></views></hwModel><category>SpiritDesign</category><function/><variation>SpiritDesign</variation><vendor>Actel</vendor><version>1.0</version><vendorExtension><type>SpiritDesign</type></vendorExtension><vendorExtension><state value="GENERATED"/></vendorExtension><vendorExtensions><componentRef library="DirectCore" name="COREABC" vendor="Actel" version="3.7.101"/><configuration><configurableElement referenceId="ABCCODE" value="JUMP $MAIN&#xA;    // Begin Interrupt Service Routine&#xA;    // clear i2c seq int&#xA;    APBWRT DAT8 0 0x00 0b00000000&#xA;    RAMREAD RAM_ADR_init_done&#xA;    CMP DAT8 1&#xA;    JUMP IF ZERO $I2C_reads&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 1 0x02&#xA;    APBWRT DAT8 0 0x80 | 1 0x52&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 2 0x02&#xA;    APBWRT DAT8 0 0x80 | 2 0x88&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 3 0x01&#xA;    APBWRT DAT8 0 0x80 | 3 0x03&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 4 0x02&#xA;    APBWRT DAT8 0 0x80 | 4 0x53&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 5 0x03&#xA;    APBWRT DAT8 0 0x80 | 5 0b00000000&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 6 0x01&#xA;    APBWRT DAT8 0 0x80 | 6 0x03&#xA;    //&#xA;    APBWRT DAT8 0 0xC0 | 7 0x02&#xA;    APBWRT DAT8 0 0x80 | 7 0x52&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 8 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 9 0x01&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 10 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 11 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 12 0x01&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 13 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 14 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 15 0x01&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 16 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 17 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 18 0x01&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 19 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 20 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 21 0x01&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 22 0x02&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 23 0x03&#xA;    // i2c stop&#xA;    APBWRT DAT8 0 0xC0 | 24 0x01&#xA;    APBWRT DAT8 0 0x80 | 24 0b00000010&#xA;    &#xA;    RAMWRT RAM_ADR_init_done DAT8 1&#xA;    &#xA;    // start timer&#xA;    APBWRT DAT 1 0x08 0b011&#xA;    JUMP $I2C_SEQ_INT_CLR&#xA;    &#xA;&#xA;    $I2C_reads&#xA;    &#xA;    // I2C 0x88 - CH1_0&#xA;    APBREAD 0 0x80 | 5&#xA;    RAMWRT RAM_ADR_I2C_CH1_0 ACC&#xA;    APBWRT ACC 2 0x03&#xA;    &#xA;    // I2C 0x89 - CH1_1&#xA;    APBREAD 0 0x80 | 11&#xA;    RAMWRT RAM_ADR_I2C_CH1_1 ACC&#xA;    APBWRT ACC 2 0x04&#xA;    &#xA;    // I2C 0x8A - CH0_0&#xA;    APBREAD 0 0x80 | 17&#xA;    RAMWRT RAM_ADR_I2C_CH0_0 ACC&#xA;    APBWRT ACC 2 0x001&#xA;    &#xA;    // I2C 0x8B - CH0_1&#xA;    APBREAD 0 0x80 | 23&#xA;    RAMWRT RAM_ADR_I2C_CH0_1 ACC&#xA;    APBWRT ACC 2 0x02&#xA;    &#xA;    APBWRT DAT8 2 0x00 1&#xA;    &#xA;    // generate LED pwm value (16 to 8 bit)&#xA;    RAMREAD RAM_ADR_I2C_CH0_1&#xA;    IOWRT ACC&#xA;    &#xA;    &#xA;    $I2C_SEQ_INT_CLR&#xA;    // clear timer int&#xA;    APBWRT DAT 1 0x10 1&#xA;&#xA;    RETISR&#xA;&#xA;$MAIN&#xA;&#xA;    DEF RAM_ADR_I2C_SEQ_CNT    0x00&#xA;    DEF RAM_ADR_I2C_CH0_0    0x01&#xA;    DEF RAM_ADR_I2C_CH0_1    0x02&#xA;    DEF RAM_ADR_I2C_CH1_0    0x03&#xA;    DEF RAM_ADR_I2C_CH1_1    0x04&#xA;    DEF RAM_ADR_init_done    0x10&#xA;    RAMWRT RAM_ADR_init_done DAT8 0&#xA;    &#xA;    &#xA;    APBWRT DAT8 0 0x02 0xFF&#xA;    //APBWRT DAT8 0 0x03 0x03    // for 100 Mhz&#xA;    &#xA;    &#xA;    // i2c start&#xA;    APBWRT DAT8 0 0xC0 | 0 0x01&#xA;    APBWRT DAT8 0 0x80 | 0 0b00000001&#xA;    // light sensor addr + W&#xA;    APBWRT DAT8 0 0xC0 | 1 0x02&#xA;    APBWRT DAT8 0 0x80 | 1 0x52&#xA;    // light sensor reg addr - ctrl&#xA;    APBWRT DAT8 0 0xC0 | 2 0x02&#xA;    APBWRT DAT8 0 0x80 | 2 0x80&#xA;    // light sensor reg data - ALS_Gain[4:2]; SW_Reset[1]; ALS_Mode[0]&#xA;    APBWRT DAT8 0 0xC0 | 3 0x02&#xA;    APBWRT DAT8 0 0x80 | 3 0b00011101&#xA;    // i2c rstart&#xA;    APBWRT DAT8 0 0xC0 | 4 0x01&#xA;    APBWRT DAT8 0 0x80 | 4 0b00000011&#xA;    // light sensor addr + W&#xA;    APBWRT DAT8 0 0xC0 | 5 0x02&#xA;    APBWRT DAT8 0 0x80 | 5 0x52&#xA;    // light sensor reg addr - meas_rate&#xA;    APBWRT DAT8 0 0xC0 | 6 0x02&#xA;    APBWRT DAT8 0 0x80 | 6 0x85&#xA;    // light sensor reg data - ALS_intgr_time[5:3]; ALS_meas_time[2:0]&#xA;    APBWRT DAT8 0 0xC0 | 7 0x02&#xA;    APBWRT DAT8 0 0x80 | 7 0b00000011&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 8 0x00&#xA;    APBWRT DAT8 0 0x80 | 8 0x89&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 9 0x00&#xA;    APBWRT DAT8 0 0x80 | 9 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 10 0x00&#xA;    APBWRT DAT8 0 0x80 | 10 0x53&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 11 0x00&#xA;    APBWRT DAT8 0 0x80 | 11 0b00000000&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 12 0x00&#xA;    APBWRT DAT8 0 0x80 | 12 03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 13 0x00&#xA;    APBWRT DAT8 0 0x80 | 13 0x52&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 14 0x00&#xA;    APBWRT DAT8 0 0x80 | 14 0x8A&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 15 0x00&#xA;    APBWRT DAT8 0 0x80 | 15 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 16 0x00&#xA;    APBWRT DAT8 0 0x80 | 16 0x53&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 17 0x00&#xA;    APBWRT DAT8 0 0x80 | 17 0b00000000&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 18 0x00&#xA;    APBWRT DAT8 0 0x80 | 18 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 19 0x00&#xA;    APBWRT DAT8 0 0x80 | 19 0x52&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 20 0x00&#xA;    APBWRT DAT8 0 0x80 | 20 0x8B&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 21 0x00&#xA;    APBWRT DAT8 0 0x80 | 21 0x03&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 22 0x00&#xA;    APBWRT DAT8 0 0x80 | 22 0x53&#xA;    // i2c NOP&#xA;    APBWRT DAT8 0 0xC0 | 23 0x00&#xA;    APBWRT DAT8 0 0x80 | 23 0b00000000&#xA;    // i2c stop&#xA;    APBWRT DAT8 0 0xC0 | 24 0x01&#xA;    APBWRT DAT8 0 0x80 | 24 0b00000010&#xA;    &#xA;    &#xA;    // INIT TIMER&#xA;    // TimerLoad&#xA;    // 977 for 20Mhz for 50ms&#xA;    // 4883 for 100Mhz for 50 ms&#xA;    APBWRT DAT 1 0x00 48828&#xA;    // TimerPrescale&#xA;    APBWRT DAT 1 0x0C 0x0009&#xA;    &#xA;    // start I2C sequence&#xA;    APBWRT DAT8 0 0x00 0b00010000&#xA;    &#xA;&#xA;    HALT&#xA;    "/><configurableElement referenceId="ACT_CALIBRATIONDATA" value="true"/><configurableElement referenceId="APB_AWIDTH" value="8"/><configurableElement referenceId="APB_DWIDTH" value="16"/><configurableElement referenceId="APB_SDEPTH" value="3"/><configurableElement referenceId="CODEHEXDUMP" value=""/><configurableElement referenceId="CODEHEXDUMP2" value=""/><configurableElement referenceId="DEBUG" value="true"/><configurableElement referenceId="EN_ACM" value="false"/><configurableElement referenceId="EN_ADD" value="true"/><configurableElement referenceId="EN_ALURAM" value="false"/><configurableElement referenceId="EN_AND" value="true"/><configurableElement referenceId="EN_CALL" value="true"/><configurableElement referenceId="EN_DATAM" value="2"/><configurableElement referenceId="EN_INC" value="true"/><configurableElement referenceId="EN_INDIRECT" value="false"/><configurableElement referenceId="EN_INT" value="1"/><configurableElement referenceId="EN_IOREAD" value="true"/><configurableElement referenceId="EN_IOWRT" value="true"/><configurableElement referenceId="EN_MULT" value="0"/><configurableElement referenceId="EN_OR" value="true"/><configurableElement referenceId="EN_PUSH" value="true"/><configurableElement referenceId="EN_RAM" value="true"/><configurableElement referenceId="EN_SHL" value="true"/><configurableElement referenceId="EN_SHR" value="true"/><configurableElement referenceId="EN_XOR" value="true"/><configurableElement referenceId="FAMILY" value="19"/><configurableElement referenceId="HDL_license" value="U"/><configurableElement referenceId="ICWIDTH" value="7"/><configurableElement referenceId="IFWIDTH" value="0"/><configurableElement referenceId="IIWIDTH" value="1"/><configurableElement referenceId="IMEM_APB_ACCESS" value="0"/><configurableElement referenceId="INITWIDTH" value="11"/><configurableElement referenceId="INSMODE" value="0"/><configurableElement referenceId="IOWIDTH" value="8"/><configurableElement referenceId="ISRADDR" value="1"/><configurableElement referenceId="MAX_NVMDWIDTH" value="32"/><configurableElement referenceId="STWIDTH" value="4"/><configurableElement referenceId="TESTBENCH" value="User"/><configurableElement referenceId="TESTMODE" value="0"/><configurableElement referenceId="UNIQ_STRING" value="COREABC_C0_COREABC_C0_0"/><configurableElement referenceId="UNIQ_STRING_LENGTH" value="23"/><configurableElement referenceId="VERILOGCODE" value=""/><configurableElement referenceId="VERILOGVARS" value=""/><configurableElement referenceId="VHDLCODE" value=""/><configurableElement referenceId="VHDLVARS" value=""/><configurableElement referenceId="ZRWIDTH" value="0"/></configuration></vendorExtensions><busInterfaces><busInterface><name>APB3master</name><busType library="AMBA2" name="APB" vendor="AMBA" version="r0p0"/><master/><vendorExtensions><used>true</used></vendorExtensions><signalMap><signal><componentSignalName>PADDR_M</componentSignalName><busSignalName>PADDR</busSignalName></signal><signal><componentSignalName>PSEL_M</componentSignalName><busSignalName>PSELx</busSignalName></signal><signal><componentSignalName>PENABLE_M</componentSignalName><busSignalName>PENABLE</busSignalName></signal><signal><componentSignalName>PWRITE_M</componentSignalName><busSignalName>PWRITE</busSignalName></signal><signal><componentSignalName>PRDATA_M</componentSignalName><busSignalName>PRDATA</busSignalName></signal><signal><componentSignalName>PWDATA_M</componentSignalName><busSignalName>PWDATA</busSignalName></signal><signal><componentSignalName>PREADY_M</componentSignalName><busSignalName>PREADY</busSignalName></signal><signal><componentSignalName>PSLVERR_M</componentSignalName><busSignalName>PSLVERR</busSignalName></signal></signalMap></busInterface></busInterfaces><model><signals><signal><name>NSYSRESET</name><direction>in</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PCLK</name><direction>in</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PRESETN</name><direction>out</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>INTACT</name><direction>out</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>INTREQ</name><direction>in</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PSEL_M</name><direction>out</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PENABLE_M</name><direction>out</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PWRITE_M</name><direction>out</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PREADY_M</name><direction>in</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PSLVERR_M</name><direction>in</direction><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>IO_OUT</name><direction>out</direction><left>7</left><right>0</right><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PADDR_M</name><direction>out</direction><left>19</left><right>0</right><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PRDATA_M</name><direction>in</direction><left>15</left><right>0</right><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>PWDATA_M</name><direction>out</direction><left>15</left><right>0</right><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal><signal><name>IO_IN</name><direction>in</direction><left>0</left><right>0</right><export>false</export><vendorExtensions><pad>false</pad><used>true</used></vendorExtensions></signal></signals></model></Component>